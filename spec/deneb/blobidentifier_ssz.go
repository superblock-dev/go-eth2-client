// Code generated by fastssz. DO NOT EDIT.
// Hash: eae19efee620f5e7f45de30e25530e2d55633029749d1f8a3d253cc4b1b522c6
// Version: 0.1.4
package deneb

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BlobIdentifier object
func (b *BlobIdentifier) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BlobIdentifier object to a target array
func (b *BlobIdentifier) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BlockRoot'
	dst = append(dst, b.BlockRoot[:]...)

	// Field (1) 'Index'
	dst = ssz.MarshalUint64(dst, uint64(b.Index))

	return
}

// UnmarshalSSZ ssz unmarshals the BlobIdentifier object
func (b *BlobIdentifier) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'BlockRoot'
	copy(b.BlockRoot[:], buf[0:32])

	// Field (1) 'Index'
	b.Index = BlobIndex(ssz.UnmarshallUint64(buf[32:40]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BlobIdentifier object
func (b *BlobIdentifier) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the BlobIdentifier object
func (b *BlobIdentifier) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BlobIdentifier object with a hasher
func (b *BlobIdentifier) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlockRoot'
	hh.PutBytes(b.BlockRoot[:])

	// Field (1) 'Index'
	hh.PutUint64(uint64(b.Index))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BlobIdentifier object
func (b *BlobIdentifier) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
