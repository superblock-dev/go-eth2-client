// Code generated by fastssz. DO NOT EDIT.
// Hash: a1857864ed33c913cc729b754070a42a43f8c5dbe4d16aedd3b197ce8728a0b0
// Version: 0.1.4
package electra

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BeaconState object
func (b *BeaconState) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconState object to a target array
func (b *BeaconState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(2621925)

	// Field (0) 'GenesisTime'
	dst = ssz.MarshalUint64(dst, b.GenesisTime)

	// Field (1) 'GenesisValidatorsRoot'
	dst = append(dst, b.GenesisValidatorsRoot[:]...)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (3) 'Fork'
	if b.Fork == nil {
		b.Fork = new(phase0.Fork)
	}
	if dst, err = b.Fork.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'LatestBlockHeader'
	if b.LatestBlockHeader == nil {
		b.LatestBlockHeader = new(phase0.BeaconBlockHeader)
	}
	if dst, err = b.LatestBlockHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'BlockRoots'
	if size := len(b.BlockRoots); size != 8192 {
		err = ssz.ErrVectorLengthFn("BeaconState.BlockRoots", size, 8192)
		return
	}
	for ii := 0; ii < 8192; ii++ {
		dst = append(dst, b.BlockRoots[ii][:]...)
	}

	// Field (6) 'StateRoots'
	if size := len(b.StateRoots); size != 8192 {
		err = ssz.ErrVectorLengthFn("BeaconState.StateRoots", size, 8192)
		return
	}
	for ii := 0; ii < 8192; ii++ {
		dst = append(dst, b.StateRoots[ii][:]...)
	}

	// Offset (7) 'HistoricalRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.HistoricalRoots) * 32

	// Field (8) 'RewardAdjustmentFactor'
	dst = ssz.MarshalUint64(dst, b.RewardAdjustmentFactor)

	// Field (9) 'ETH1Data'
	if b.ETH1Data == nil {
		b.ETH1Data = new(phase0.ETH1Data)
	}
	if dst, err = b.ETH1Data.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (10) 'ETH1DataVotes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.ETH1DataVotes) * 72

	// Field (11) 'ETH1DepositIndex'
	dst = ssz.MarshalUint64(dst, b.ETH1DepositIndex)

	// Offset (12) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Validators) * 121

	// Offset (13) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Balances) * 8

	// Field (14) 'Reserves'
	dst = ssz.MarshalUint64(dst, b.Reserves)

	// Field (15) 'RANDAOMixes'
	if size := len(b.RANDAOMixes); size != 65536 {
		err = ssz.ErrVectorLengthFn("BeaconState.RANDAOMixes", size, 65536)
		return
	}
	for ii := 0; ii < 65536; ii++ {
		dst = append(dst, b.RANDAOMixes[ii][:]...)
	}

	// Offset (16) 'PreviousEpochParticipation'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.PreviousEpochParticipation) * 1

	// Offset (17) 'CurrentEpochParticipation'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.CurrentEpochParticipation) * 1

	// Field (18) 'JustificationBits'
	if size := len(b.JustificationBits); size != 1 {
		err = ssz.ErrBytesLengthFn("BeaconState.JustificationBits", size, 1)
		return
	}
	dst = append(dst, b.JustificationBits...)

	// Field (19) 'PreviousJustifiedCheckpoint'
	if b.PreviousJustifiedCheckpoint == nil {
		b.PreviousJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if dst, err = b.PreviousJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (20) 'CurrentJustifiedCheckpoint'
	if b.CurrentJustifiedCheckpoint == nil {
		b.CurrentJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if dst, err = b.CurrentJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (21) 'FinalizedCheckpoint'
	if b.FinalizedCheckpoint == nil {
		b.FinalizedCheckpoint = new(phase0.Checkpoint)
	}
	if dst, err = b.FinalizedCheckpoint.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (22) 'InactivityScores'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.InactivityScores) * 8

	// Offset (23) 'LatestExecutionPayloadHeader'
	dst = ssz.WriteOffset(dst, offset)
	if b.LatestExecutionPayloadHeader == nil {
		b.LatestExecutionPayloadHeader = new(deneb.ExecutionPayloadHeader)
	}
	offset += b.LatestExecutionPayloadHeader.SizeSSZ()

	// Field (24) 'NextWithdrawalIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.NextWithdrawalIndex))

	// Field (25) 'NextWithdrawalValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.NextWithdrawalValidatorIndex))

	// Offset (26) 'HistoricalSummaries'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.HistoricalSummaries) * 64

	// Field (27) 'DepositRequestsStartIndex'
	dst = ssz.MarshalUint64(dst, b.DepositRequestsStartIndex)

	// Field (28) 'DepositBalanceToConsume'
	dst = ssz.MarshalUint64(dst, uint64(b.DepositBalanceToConsume))

	// Field (29) 'ExitBalanceToConsume'
	dst = ssz.MarshalUint64(dst, uint64(b.ExitBalanceToConsume))

	// Field (30) 'EarliestExitEpoch'
	dst = ssz.MarshalUint64(dst, uint64(b.EarliestExitEpoch))

	// Offset (31) 'PendingDeposits'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.PendingDeposits) * 192

	// Offset (32) 'PendingPartialWithdrawals'
	dst = ssz.WriteOffset(dst, offset)

	// Field (7) 'HistoricalRoots'
	if size := len(b.HistoricalRoots); size > 16777216 {
		err = ssz.ErrListTooBigFn("BeaconState.HistoricalRoots", size, 16777216)
		return
	}
	for ii := 0; ii < len(b.HistoricalRoots); ii++ {
		dst = append(dst, b.HistoricalRoots[ii][:]...)
	}

	// Field (10) 'ETH1DataVotes'
	if size := len(b.ETH1DataVotes); size > 2048 {
		err = ssz.ErrListTooBigFn("BeaconState.ETH1DataVotes", size, 2048)
		return
	}
	for ii := 0; ii < len(b.ETH1DataVotes); ii++ {
		if dst, err = b.ETH1DataVotes[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (12) 'Validators'
	if size := len(b.Validators); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconState.Validators", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.Validators); ii++ {
		if dst, err = b.Validators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (13) 'Balances'
	if size := len(b.Balances); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconState.Balances", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.Balances); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(b.Balances[ii]))
	}

	// Field (16) 'PreviousEpochParticipation'
	if size := len(b.PreviousEpochParticipation); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconState.PreviousEpochParticipation", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.PreviousEpochParticipation); ii++ {
		dst = ssz.MarshalUint8(dst, uint8(b.PreviousEpochParticipation[ii]))
	}

	// Field (17) 'CurrentEpochParticipation'
	if size := len(b.CurrentEpochParticipation); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconState.CurrentEpochParticipation", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.CurrentEpochParticipation); ii++ {
		dst = ssz.MarshalUint8(dst, uint8(b.CurrentEpochParticipation[ii]))
	}

	// Field (22) 'InactivityScores'
	if size := len(b.InactivityScores); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("BeaconState.InactivityScores", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(b.InactivityScores); ii++ {
		dst = ssz.MarshalUint64(dst, b.InactivityScores[ii])
	}

	// Field (23) 'LatestExecutionPayloadHeader'
	if dst, err = b.LatestExecutionPayloadHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (26) 'HistoricalSummaries'
	if size := len(b.HistoricalSummaries); size > 16777216 {
		err = ssz.ErrListTooBigFn("BeaconState.HistoricalSummaries", size, 16777216)
		return
	}
	for ii := 0; ii < len(b.HistoricalSummaries); ii++ {
		if dst, err = b.HistoricalSummaries[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (31) 'PendingDeposits'
	if size := len(b.PendingDeposits); size > 134217728 {
		err = ssz.ErrListTooBigFn("BeaconState.PendingDeposits", size, 134217728)
		return
	}
	for ii := 0; ii < len(b.PendingDeposits); ii++ {
		if dst, err = b.PendingDeposits[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (32) 'PendingPartialWithdrawals'
	if size := len(b.PendingPartialWithdrawals); size > 134217728 {
		err = ssz.ErrListTooBigFn("BeaconState.PendingPartialWithdrawals", size, 134217728)
		return
	}
	for ii := 0; ii < len(b.PendingPartialWithdrawals); ii++ {
		if dst, err = b.PendingPartialWithdrawals[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconState object
func (b *BeaconState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 2621925 {
		return ssz.ErrSize
	}

	tail := buf
	var o7, o10, o12, o13, o16, o17, o22, o23, o26, o31, o32 uint64

	// Field (0) 'GenesisTime'
	b.GenesisTime = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'GenesisValidatorsRoot'
	copy(b.GenesisValidatorsRoot[:], buf[8:40])

	// Field (2) 'Slot'
	b.Slot = phase0.Slot(ssz.UnmarshallUint64(buf[40:48]))

	// Field (3) 'Fork'
	if b.Fork == nil {
		b.Fork = new(phase0.Fork)
	}
	if err = b.Fork.UnmarshalSSZ(buf[48:64]); err != nil {
		return err
	}

	// Field (4) 'LatestBlockHeader'
	if b.LatestBlockHeader == nil {
		b.LatestBlockHeader = new(phase0.BeaconBlockHeader)
	}
	if err = b.LatestBlockHeader.UnmarshalSSZ(buf[64:176]); err != nil {
		return err
	}

	// Field (5) 'BlockRoots'
	b.BlockRoots = make([]phase0.Root, 8192)
	for ii := 0; ii < 8192; ii++ {
		copy(b.BlockRoots[ii][:], buf[176:262320][ii*32:(ii+1)*32])
	}

	// Field (6) 'StateRoots'
	b.StateRoots = make([]phase0.Root, 8192)
	for ii := 0; ii < 8192; ii++ {
		copy(b.StateRoots[ii][:], buf[262320:524464][ii*32:(ii+1)*32])
	}

	// Offset (7) 'HistoricalRoots'
	if o7 = ssz.ReadOffset(buf[524464:524468]); o7 > size {
		return ssz.ErrOffset
	}

	if o7 != 2621925 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (8) 'RewardAdjustmentFactor'
	b.RewardAdjustmentFactor = ssz.UnmarshallUint64(buf[524468:524476])

	// Field (9) 'ETH1Data'
	if b.ETH1Data == nil {
		b.ETH1Data = new(phase0.ETH1Data)
	}
	if err = b.ETH1Data.UnmarshalSSZ(buf[524476:524548]); err != nil {
		return err
	}

	// Offset (10) 'ETH1DataVotes'
	if o10 = ssz.ReadOffset(buf[524548:524552]); o10 > size || o7 > o10 {
		return ssz.ErrOffset
	}

	// Field (11) 'ETH1DepositIndex'
	b.ETH1DepositIndex = ssz.UnmarshallUint64(buf[524552:524560])

	// Offset (12) 'Validators'
	if o12 = ssz.ReadOffset(buf[524560:524564]); o12 > size || o10 > o12 {
		return ssz.ErrOffset
	}

	// Offset (13) 'Balances'
	if o13 = ssz.ReadOffset(buf[524564:524568]); o13 > size || o12 > o13 {
		return ssz.ErrOffset
	}

	// Field (14) 'Reserves'
	b.Reserves = ssz.UnmarshallUint64(buf[524568:524576])

	// Field (15) 'RANDAOMixes'
	b.RANDAOMixes = make([]phase0.Root, 65536)
	for ii := 0; ii < 65536; ii++ {
		copy(b.RANDAOMixes[ii][:], buf[524576:2621728][ii*32:(ii+1)*32])
	}

	// Offset (16) 'PreviousEpochParticipation'
	if o16 = ssz.ReadOffset(buf[2621728:2621732]); o16 > size || o13 > o16 {
		return ssz.ErrOffset
	}

	// Offset (17) 'CurrentEpochParticipation'
	if o17 = ssz.ReadOffset(buf[2621732:2621736]); o17 > size || o16 > o17 {
		return ssz.ErrOffset
	}

	// Field (18) 'JustificationBits'
	if cap(b.JustificationBits) == 0 {
		b.JustificationBits = make([]byte, 0, len(buf[2621736:2621737]))
	}
	b.JustificationBits = append(b.JustificationBits, buf[2621736:2621737]...)

	// Field (19) 'PreviousJustifiedCheckpoint'
	if b.PreviousJustifiedCheckpoint == nil {
		b.PreviousJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.PreviousJustifiedCheckpoint.UnmarshalSSZ(buf[2621737:2621777]); err != nil {
		return err
	}

	// Field (20) 'CurrentJustifiedCheckpoint'
	if b.CurrentJustifiedCheckpoint == nil {
		b.CurrentJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.CurrentJustifiedCheckpoint.UnmarshalSSZ(buf[2621777:2621817]); err != nil {
		return err
	}

	// Field (21) 'FinalizedCheckpoint'
	if b.FinalizedCheckpoint == nil {
		b.FinalizedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.FinalizedCheckpoint.UnmarshalSSZ(buf[2621817:2621857]); err != nil {
		return err
	}

	// Offset (22) 'InactivityScores'
	if o22 = ssz.ReadOffset(buf[2621857:2621861]); o22 > size || o17 > o22 {
		return ssz.ErrOffset
	}

	// Offset (23) 'LatestExecutionPayloadHeader'
	if o23 = ssz.ReadOffset(buf[2621861:2621865]); o23 > size || o22 > o23 {
		return ssz.ErrOffset
	}

	// Field (24) 'NextWithdrawalIndex'
	b.NextWithdrawalIndex = capella.WithdrawalIndex(ssz.UnmarshallUint64(buf[2621865:2621873]))

	// Field (25) 'NextWithdrawalValidatorIndex'
	b.NextWithdrawalValidatorIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[2621873:2621881]))

	// Offset (26) 'HistoricalSummaries'
	if o26 = ssz.ReadOffset(buf[2621881:2621885]); o26 > size || o23 > o26 {
		return ssz.ErrOffset
	}

	// Field (27) 'DepositRequestsStartIndex'
	b.DepositRequestsStartIndex = ssz.UnmarshallUint64(buf[2621885:2621893])

	// Field (28) 'DepositBalanceToConsume'
	b.DepositBalanceToConsume = phase0.Gwei(ssz.UnmarshallUint64(buf[2621893:2621901]))

	// Field (29) 'ExitBalanceToConsume'
	b.ExitBalanceToConsume = phase0.Gwei(ssz.UnmarshallUint64(buf[2621901:2621909]))

	// Field (30) 'EarliestExitEpoch'
	b.EarliestExitEpoch = phase0.Epoch(ssz.UnmarshallUint64(buf[2621909:2621917]))

	// Offset (31) 'PendingDeposits'
	if o31 = ssz.ReadOffset(buf[2621917:2621921]); o31 > size || o26 > o31 {
		return ssz.ErrOffset
	}

	// Offset (32) 'PendingPartialWithdrawals'
	if o32 = ssz.ReadOffset(buf[2621921:2621925]); o32 > size || o31 > o32 {
		return ssz.ErrOffset
	}

	// Field (7) 'HistoricalRoots'
	{
		buf = tail[o7:o10]
		num, err := ssz.DivideInt2(len(buf), 32, 16777216)
		if err != nil {
			return err
		}
		b.HistoricalRoots = make([]phase0.Root, num)
		for ii := 0; ii < num; ii++ {
			copy(b.HistoricalRoots[ii][:], buf[ii*32:(ii+1)*32])
		}
	}

	// Field (10) 'ETH1DataVotes'
	{
		buf = tail[o10:o12]
		num, err := ssz.DivideInt2(len(buf), 72, 2048)
		if err != nil {
			return err
		}
		b.ETH1DataVotes = make([]*phase0.ETH1Data, num)
		for ii := 0; ii < num; ii++ {
			if b.ETH1DataVotes[ii] == nil {
				b.ETH1DataVotes[ii] = new(phase0.ETH1Data)
			}
			if err = b.ETH1DataVotes[ii].UnmarshalSSZ(buf[ii*72 : (ii+1)*72]); err != nil {
				return err
			}
		}
	}

	// Field (12) 'Validators'
	{
		buf = tail[o12:o13]
		num, err := ssz.DivideInt2(len(buf), 121, 1099511627776)
		if err != nil {
			return err
		}
		b.Validators = make([]*phase0.Validator, num)
		for ii := 0; ii < num; ii++ {
			if b.Validators[ii] == nil {
				b.Validators[ii] = new(phase0.Validator)
			}
			if err = b.Validators[ii].UnmarshalSSZ(buf[ii*121 : (ii+1)*121]); err != nil {
				return err
			}
		}
	}

	// Field (13) 'Balances'
	{
		buf = tail[o13:o16]
		num, err := ssz.DivideInt2(len(buf), 8, 1099511627776)
		if err != nil {
			return err
		}
		b.Balances = make([]phase0.Gwei, num)
		for ii := 0; ii < num; ii++ {
			b.Balances[ii] = phase0.Gwei(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (16) 'PreviousEpochParticipation'
	{
		buf = tail[o16:o17]
		num, err := ssz.DivideInt2(len(buf), 1, 1099511627776)
		if err != nil {
			return err
		}
		b.PreviousEpochParticipation = make([]altair.ParticipationFlags, num)
		for ii := 0; ii < num; ii++ {
			b.PreviousEpochParticipation[ii] = altair.ParticipationFlags(ssz.UnmarshallUint8(buf[ii*1 : (ii+1)*1]))
		}
	}

	// Field (17) 'CurrentEpochParticipation'
	{
		buf = tail[o17:o22]
		num, err := ssz.DivideInt2(len(buf), 1, 1099511627776)
		if err != nil {
			return err
		}
		b.CurrentEpochParticipation = make([]altair.ParticipationFlags, num)
		for ii := 0; ii < num; ii++ {
			b.CurrentEpochParticipation[ii] = altair.ParticipationFlags(ssz.UnmarshallUint8(buf[ii*1 : (ii+1)*1]))
		}
	}

	// Field (22) 'InactivityScores'
	{
		buf = tail[o22:o23]
		num, err := ssz.DivideInt2(len(buf), 8, 1099511627776)
		if err != nil {
			return err
		}
		b.InactivityScores = ssz.ExtendUint64(b.InactivityScores, num)
		for ii := 0; ii < num; ii++ {
			b.InactivityScores[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (23) 'LatestExecutionPayloadHeader'
	{
		buf = tail[o23:o26]
		if b.LatestExecutionPayloadHeader == nil {
			b.LatestExecutionPayloadHeader = new(deneb.ExecutionPayloadHeader)
		}
		if err = b.LatestExecutionPayloadHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (26) 'HistoricalSummaries'
	{
		buf = tail[o26:o31]
		num, err := ssz.DivideInt2(len(buf), 64, 16777216)
		if err != nil {
			return err
		}
		b.HistoricalSummaries = make([]*capella.HistoricalSummary, num)
		for ii := 0; ii < num; ii++ {
			if b.HistoricalSummaries[ii] == nil {
				b.HistoricalSummaries[ii] = new(capella.HistoricalSummary)
			}
			if err = b.HistoricalSummaries[ii].UnmarshalSSZ(buf[ii*64 : (ii+1)*64]); err != nil {
				return err
			}
		}
	}

	// Field (31) 'PendingDeposits'
	{
		buf = tail[o31:o32]
		num, err := ssz.DivideInt2(len(buf), 192, 134217728)
		if err != nil {
			return err
		}
		b.PendingDeposits = make([]*PendingDeposit, num)
		for ii := 0; ii < num; ii++ {
			if b.PendingDeposits[ii] == nil {
				b.PendingDeposits[ii] = new(PendingDeposit)
			}
			if err = b.PendingDeposits[ii].UnmarshalSSZ(buf[ii*192 : (ii+1)*192]); err != nil {
				return err
			}
		}
	}

	// Field (32) 'PendingPartialWithdrawals'
	{
		buf = tail[o32:]
		num, err := ssz.DivideInt2(len(buf), 24, 134217728)
		if err != nil {
			return err
		}
		b.PendingPartialWithdrawals = make([]*PendingPartialWithdrawal, num)
		for ii := 0; ii < num; ii++ {
			if b.PendingPartialWithdrawals[ii] == nil {
				b.PendingPartialWithdrawals[ii] = new(PendingPartialWithdrawal)
			}
			if err = b.PendingPartialWithdrawals[ii].UnmarshalSSZ(buf[ii*24 : (ii+1)*24]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconState object
func (b *BeaconState) SizeSSZ() (size int) {
	size = 2621925

	// Field (7) 'HistoricalRoots'
	size += len(b.HistoricalRoots) * 32

	// Field (10) 'ETH1DataVotes'
	size += len(b.ETH1DataVotes) * 72

	// Field (12) 'Validators'
	size += len(b.Validators) * 121

	// Field (13) 'Balances'
	size += len(b.Balances) * 8

	// Field (16) 'PreviousEpochParticipation'
	size += len(b.PreviousEpochParticipation) * 1

	// Field (17) 'CurrentEpochParticipation'
	size += len(b.CurrentEpochParticipation) * 1

	// Field (22) 'InactivityScores'
	size += len(b.InactivityScores) * 8

	// Field (23) 'LatestExecutionPayloadHeader'
	if b.LatestExecutionPayloadHeader == nil {
		b.LatestExecutionPayloadHeader = new(deneb.ExecutionPayloadHeader)
	}
	size += b.LatestExecutionPayloadHeader.SizeSSZ()

	// Field (26) 'HistoricalSummaries'
	size += len(b.HistoricalSummaries) * 64

	// Field (31) 'PendingDeposits'
	size += len(b.PendingDeposits) * 192

	// Field (32) 'PendingPartialWithdrawals'
	size += len(b.PendingPartialWithdrawals) * 24

	return
}

// HashTreeRoot ssz hashes the BeaconState object
func (b *BeaconState) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconState object with a hasher
func (b *BeaconState) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'GenesisTime'
	hh.PutUint64(b.GenesisTime)

	// Field (1) 'GenesisValidatorsRoot'
	hh.PutBytes(b.GenesisValidatorsRoot[:])

	// Field (2) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (3) 'Fork'
	if b.Fork == nil {
		b.Fork = new(phase0.Fork)
	}
	if err = b.Fork.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'LatestBlockHeader'
	if b.LatestBlockHeader == nil {
		b.LatestBlockHeader = new(phase0.BeaconBlockHeader)
	}
	if err = b.LatestBlockHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'BlockRoots'
	{
		if size := len(b.BlockRoots); size != 8192 {
			err = ssz.ErrVectorLengthFn("BeaconState.BlockRoots", size, 8192)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.BlockRoots {
			hh.Append(i[:])
		}
		hh.Merkleize(subIndx)
	}

	// Field (6) 'StateRoots'
	{
		if size := len(b.StateRoots); size != 8192 {
			err = ssz.ErrVectorLengthFn("BeaconState.StateRoots", size, 8192)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.StateRoots {
			hh.Append(i[:])
		}
		hh.Merkleize(subIndx)
	}

	// Field (7) 'HistoricalRoots'
	{
		if size := len(b.HistoricalRoots); size > 16777216 {
			err = ssz.ErrListTooBigFn("BeaconState.HistoricalRoots", size, 16777216)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.HistoricalRoots {
			hh.Append(i[:])
		}
		numItems := uint64(len(b.HistoricalRoots))
		hh.MerkleizeWithMixin(subIndx, numItems, 16777216)
	}

	// Field (8) 'RewardAdjustmentFactor'
	hh.PutUint64(b.RewardAdjustmentFactor)

	// Field (9) 'ETH1Data'
	if b.ETH1Data == nil {
		b.ETH1Data = new(phase0.ETH1Data)
	}
	if err = b.ETH1Data.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (10) 'ETH1DataVotes'
	{
		subIndx := hh.Index()
		num := uint64(len(b.ETH1DataVotes))
		if num > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.ETH1DataVotes {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 2048)
	}

	// Field (11) 'ETH1DepositIndex'
	hh.PutUint64(b.ETH1DepositIndex)

	// Field (12) 'Validators'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Validators))
		if num > 1099511627776 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Validators {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1099511627776)
	}

	// Field (13) 'Balances'
	{
		if size := len(b.Balances); size > 1099511627776 {
			err = ssz.ErrListTooBigFn("BeaconState.Balances", size, 1099511627776)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.Balances {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(b.Balances))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 8))
	}

	// Field (14) 'Reserves'
	hh.PutUint64(b.Reserves)

	// Field (15) 'RANDAOMixes'
	{
		if size := len(b.RANDAOMixes); size != 65536 {
			err = ssz.ErrVectorLengthFn("BeaconState.RANDAOMixes", size, 65536)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.RANDAOMixes {
			hh.Append(i[:])
		}
		hh.Merkleize(subIndx)
	}

	// Field (16) 'PreviousEpochParticipation'
	{
		if size := len(b.PreviousEpochParticipation); size > 1099511627776 {
			err = ssz.ErrListTooBigFn("BeaconState.PreviousEpochParticipation", size, 1099511627776)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.PreviousEpochParticipation {
			hh.AppendUint8(uint8(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(b.PreviousEpochParticipation))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 1))
	}

	// Field (17) 'CurrentEpochParticipation'
	{
		if size := len(b.CurrentEpochParticipation); size > 1099511627776 {
			err = ssz.ErrListTooBigFn("BeaconState.CurrentEpochParticipation", size, 1099511627776)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.CurrentEpochParticipation {
			hh.AppendUint8(uint8(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(b.CurrentEpochParticipation))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 1))
	}

	// Field (18) 'JustificationBits'
	if size := len(b.JustificationBits); size != 1 {
		err = ssz.ErrBytesLengthFn("BeaconState.JustificationBits", size, 1)
		return
	}
	hh.PutBytes(b.JustificationBits)

	// Field (19) 'PreviousJustifiedCheckpoint'
	if b.PreviousJustifiedCheckpoint == nil {
		b.PreviousJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.PreviousJustifiedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (20) 'CurrentJustifiedCheckpoint'
	if b.CurrentJustifiedCheckpoint == nil {
		b.CurrentJustifiedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.CurrentJustifiedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (21) 'FinalizedCheckpoint'
	if b.FinalizedCheckpoint == nil {
		b.FinalizedCheckpoint = new(phase0.Checkpoint)
	}
	if err = b.FinalizedCheckpoint.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (22) 'InactivityScores'
	{
		if size := len(b.InactivityScores); size > 1099511627776 {
			err = ssz.ErrListTooBigFn("BeaconState.InactivityScores", size, 1099511627776)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.InactivityScores {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(b.InactivityScores))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(1099511627776, numItems, 8))
	}

	// Field (23) 'LatestExecutionPayloadHeader'
	if err = b.LatestExecutionPayloadHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (24) 'NextWithdrawalIndex'
	hh.PutUint64(uint64(b.NextWithdrawalIndex))

	// Field (25) 'NextWithdrawalValidatorIndex'
	hh.PutUint64(uint64(b.NextWithdrawalValidatorIndex))

	// Field (26) 'HistoricalSummaries'
	{
		subIndx := hh.Index()
		num := uint64(len(b.HistoricalSummaries))
		if num > 16777216 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.HistoricalSummaries {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 16777216)
	}

	// Field (27) 'DepositRequestsStartIndex'
	hh.PutUint64(b.DepositRequestsStartIndex)

	// Field (28) 'DepositBalanceToConsume'
	hh.PutUint64(uint64(b.DepositBalanceToConsume))

	// Field (29) 'ExitBalanceToConsume'
	hh.PutUint64(uint64(b.ExitBalanceToConsume))

	// Field (30) 'EarliestExitEpoch'
	hh.PutUint64(uint64(b.EarliestExitEpoch))

	// Field (31) 'PendingDeposits'
	{
		subIndx := hh.Index()
		num := uint64(len(b.PendingDeposits))
		if num > 134217728 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.PendingDeposits {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 134217728)
	}

	// Field (32) 'PendingPartialWithdrawals'
	{
		subIndx := hh.Index()
		num := uint64(len(b.PendingPartialWithdrawals))
		if num > 134217728 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.PendingPartialWithdrawals {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 134217728)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BeaconState object
func (b *BeaconState) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
