// Code generated by fastssz. DO NOT EDIT.
// Hash: 476c2f52fce22b86105c3bb493ad288f196cb561852abc6adf85bc92d5dbcd4c
// Version: 0.1.3
package bellatrix

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ExecutionPayload object
func (e *ExecutionPayload) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayload object to a target array
func (e *ExecutionPayload) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(540)

	// Field (0) 'ParentHash'
	dst = append(dst, e.ParentHash[:]...)

	// Field (1) 'FeeRecipient'
	dst = append(dst, e.FeeRecipient[:]...)

	// Field (2) 'StateRoot'
	dst = append(dst, e.StateRoot[:]...)

	// Field (3) 'CheckpointRoot'
	dst = append(dst, e.CheckpointRoot[:]...)

	// Field (4) 'ReceiptsRoot'
	dst = append(dst, e.ReceiptsRoot[:]...)

	// Field (5) 'LogsBloom'
	dst = append(dst, e.LogsBloom[:]...)

	// Field (6) 'PrevRandao'
	dst = append(dst, e.PrevRandao[:]...)

	// Field (7) 'BlockNumber'
	dst = ssz.MarshalUint64(dst, e.BlockNumber)

	// Field (8) 'GasLimit'
	dst = ssz.MarshalUint64(dst, e.GasLimit)

	// Field (9) 'GasUsed'
	dst = ssz.MarshalUint64(dst, e.GasUsed)

	// Field (10) 'Timestamp'
	dst = ssz.MarshalUint64(dst, e.Timestamp)

	// Offset (11) 'ExtraData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ExtraData)

	// Field (12) 'BaseFeePerGas'
	dst = append(dst, e.BaseFeePerGas[:]...)

	// Field (13) 'BlockHash'
	dst = append(dst, e.BlockHash[:]...)

	// Offset (14) 'Transactions'
	dst = ssz.WriteOffset(dst, offset)

	// Field (11) 'ExtraData'
	if size := len(e.ExtraData); size > 32 {
		err = ssz.ErrBytesLengthFn("ExecutionPayload.ExtraData", size, 32)
		return
	}
	dst = append(dst, e.ExtraData...)

	// Field (14) 'Transactions'
	if size := len(e.Transactions); size > 1048576 {
		err = ssz.ErrListTooBigFn("ExecutionPayload.Transactions", size, 1048576)
		return
	}
	{
		offset = 4 * len(e.Transactions)
		for ii := 0; ii < len(e.Transactions); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(e.Transactions[ii])
		}
	}
	for ii := 0; ii < len(e.Transactions); ii++ {
		if size := len(e.Transactions[ii]); size > 1073741824 {
			err = ssz.ErrBytesLengthFn("ExecutionPayload.Transactions[ii]", size, 1073741824)
			return
		}
		dst = append(dst, e.Transactions[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayload object
func (e *ExecutionPayload) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 540 {
		return ssz.ErrSize
	}

	tail := buf
	var o11, o14 uint64

	// Field (0) 'ParentHash'
	copy(e.ParentHash[:], buf[0:32])

	// Field (1) 'FeeRecipient'
	copy(e.FeeRecipient[:], buf[32:52])

	// Field (2) 'StateRoot'
	copy(e.StateRoot[:], buf[52:84])

	// Field (3) 'CheckpointRoot'
	copy(e.CheckpointRoot[:], buf[84:116])

	// Field (4) 'ReceiptsRoot'
	copy(e.ReceiptsRoot[:], buf[116:148])

	// Field (5) 'LogsBloom'
	copy(e.LogsBloom[:], buf[148:404])

	// Field (6) 'PrevRandao'
	copy(e.PrevRandao[:], buf[404:436])

	// Field (7) 'BlockNumber'
	e.BlockNumber = ssz.UnmarshallUint64(buf[436:444])

	// Field (8) 'GasLimit'
	e.GasLimit = ssz.UnmarshallUint64(buf[444:452])

	// Field (9) 'GasUsed'
	e.GasUsed = ssz.UnmarshallUint64(buf[452:460])

	// Field (10) 'Timestamp'
	e.Timestamp = ssz.UnmarshallUint64(buf[460:468])

	// Offset (11) 'ExtraData'
	if o11 = ssz.ReadOffset(buf[468:472]); o11 > size {
		return ssz.ErrOffset
	}

	if o11 < 540 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (12) 'BaseFeePerGas'
	copy(e.BaseFeePerGas[:], buf[472:504])

	// Field (13) 'BlockHash'
	copy(e.BlockHash[:], buf[504:536])

	// Offset (14) 'Transactions'
	if o14 = ssz.ReadOffset(buf[536:540]); o14 > size || o11 > o14 {
		return ssz.ErrOffset
	}

	// Field (11) 'ExtraData'
	{
		buf = tail[o11:o14]
		if len(buf) > 32 {
			return ssz.ErrBytesLength
		}
		if cap(e.ExtraData) == 0 {
			e.ExtraData = make([]byte, 0, len(buf))
		}
		e.ExtraData = append(e.ExtraData, buf...)
	}

	// Field (14) 'Transactions'
	{
		buf = tail[o14:]
		num, err := ssz.DecodeDynamicLength(buf, 1048576)
		if err != nil {
			return err
		}
		e.Transactions = make([]Transaction, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 1073741824 {
				return ssz.ErrBytesLength
			}
			if cap(e.Transactions[indx]) == 0 {
				e.Transactions[indx] = make([]byte, 0, len(buf))
			}
			e.Transactions[indx] = append(e.Transactions[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayload object
func (e *ExecutionPayload) SizeSSZ() (size int) {
	size = 540

	// Field (11) 'ExtraData'
	size += len(e.ExtraData)

	// Field (14) 'Transactions'
	for ii := 0; ii < len(e.Transactions); ii++ {
		size += 4
		size += len(e.Transactions[ii])
	}

	return
}

// HashTreeRoot ssz hashes the ExecutionPayload object
func (e *ExecutionPayload) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayload object with a hasher
func (e *ExecutionPayload) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	hh.PutBytes(e.ParentHash[:])

	// Field (1) 'FeeRecipient'
	hh.PutBytes(e.FeeRecipient[:])

	// Field (2) 'StateRoot'
	hh.PutBytes(e.StateRoot[:])

	// Field (3) 'CheckpointRoot'
	hh.PutBytes(e.CheckpointRoot[:])

	// Field (4) 'ReceiptsRoot'
	hh.PutBytes(e.ReceiptsRoot[:])

	// Field (5) 'LogsBloom'
	hh.PutBytes(e.LogsBloom[:])

	// Field (6) 'PrevRandao'
	hh.PutBytes(e.PrevRandao[:])

	// Field (7) 'BlockNumber'
	hh.PutUint64(e.BlockNumber)

	// Field (8) 'GasLimit'
	hh.PutUint64(e.GasLimit)

	// Field (9) 'GasUsed'
	hh.PutUint64(e.GasUsed)

	// Field (10) 'Timestamp'
	hh.PutUint64(e.Timestamp)

	// Field (11) 'ExtraData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(e.ExtraData))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(e.ExtraData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	// Field (12) 'BaseFeePerGas'
	hh.PutBytes(e.BaseFeePerGas[:])

	// Field (13) 'BlockHash'
	hh.PutBytes(e.BlockHash[:])

	// Field (14) 'Transactions'
	{
		subIndx := hh.Index()
		num := uint64(len(e.Transactions))
		if num > 1048576 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.Transactions {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 1073741824 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (1073741824+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1048576)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ExecutionPayload object
func (e *ExecutionPayload) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
